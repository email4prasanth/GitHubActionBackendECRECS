
name: Backend Check

on:
  push:
    branches:
      - prasanth
    paths:
      - 'backend/**'

  pull_request:
    branches:
      - prasanth

jobs:
  # Job 1: Build and Test the backend code
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js (assuming your backend is Node.js-based)
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm install moment nodemon express

      # Step 4: Run tests (Modify this according to your testing framework)
      - name: Run tests
        run: | 
          # Start the server and set it to shut down after 30 seconds
          node -e "
          const express = require('express');
          const moment = require('moment');

          const app = express();
          const port = 3000;

          app.get('/', (req, res) => {
              const date = moment().format('LL');
              res.send('Hello Node.js<br>' + date);
          });

          const server = app.listen(port, '0.0.0.0', () => {
              console.log('The Server is running on port ' + port);
          });

          // Shut down the server after 30 seconds
          setTimeout(() => {
              console.log('Shutting down the server after 30 seconds...');
              server.close(() => {
                  console.log('Server shut down gracefully.');
                  process.exit(0); // Exit the process
              });
          }, 2000); // 2 seconds
          "

  # Job 2: Build Docker Image and Push to ECR
  build-and-push:
    needs: build-and-test  # Only runs if tests pass
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Configure AWS Credentials (authentication step)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 4: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      # Step 5: Check if the ECR repository exists, and create it if it doesn't
      - name: Create ECR repository if it doesn't exist
        run: |
          if ! aws ecr describe-repositories --repository-names my-backend-app --region ${{ secrets.AWS_REGION }} > /dev/null 2>&1; then
            echo "ECR repository does not exist. Creating it..."
            aws ecr create-repository --repository-name my-backend-app --region ${{ secrets.AWS_REGION }}
          else
            echo "ECR repository already exists. Skipping creation."
          fi

      # Step 6: Increment and retrieve the build ID
      - name: Get current build ID
        id: build_id
        run: |
          if [ ! -f build-id.txt ]; then echo "0" > build-id.txt; fi
          build_id=$(cat build-id.txt)
          echo "Current Build ID: $build_id"
          new_build_id=$((build_id+1))
          echo $new_build_id > build-id.txt
          echo "build_id=$new_build_id" >> $GITHUB_ENV

      # Step 7: Commit the new build ID back to the repository
      - name: Commit updated build ID
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add build-id.txt
          git commit -m "Increment build ID to ${{ env.build_id }}"
          git push

      # Step 8: Build and tag the Docker image using the build ID
      - name: Build Docker image
        run: |
          echo "Building Docker image with tag: ${{ env.build_id }}"
          docker build -t my-backend-app:${{ env.build_id }} -f ./backend/Dockerfile .

      # Step 9: Tag Docker image for ECR
      - name: Tag Docker image for ECR
        run: |
          docker tag my-backend-app:${{ env.build_id }} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-backend-app:${{ env.build_id }}

      # Step 10: Push Docker image to ECR
      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-backend-app:${{ env.build_id }}
    outputs:
      build_id: ${{ env.build_id }}

  # Job 3: Deploy the Docker Container in AWS ECS
  deploy-to-ecs:
    needs: build-and-push
    runs-on: ubuntu-latest
    env: 
      build_id: ${{ needs.build-and-push.outputs.build_id }}
    steps:
      - name: Deploy to ECS
        run: |
          echo "Deploying version ${{ env.build_id }} to ECS"
