name: Backend Check

on:
  push:
    branches:
      - prasanth
    paths:
      - 'backend/**'

  pull_request:
    branches:
      - prasanth

jobs:
  # Job 1: Build and Test the backend code
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js (assuming your backend is Node.js-based)
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          npm install moment nodemon

      # Step 4: Run tests (Modify this according to your testing framework)
      - name: Run tests
        run: node backend/index.js

# Job 2: Build Docker Image and Push to ECR
  build-and-push:
    needs: build-and-test  # Only runs if tests pass
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Configure AWS Credentials (authentication step)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 4: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      # # Step 4: Build and tag the Docker image using the Dockerfile
      # - name: Build Docker image
      #   run: |
      #     IMAGE_TAG=$(date +%Y%m%d%H%M%S)
      #     docker build -t my-backend-app:${IMAGE_TAG} -f ./backend/Dockerfile .

      # # Step 5: Tag Docker image for ECR
      # - name: Tag Docker image for ECR
      #   run: |
      #     IMAGE_TAG=$(date +%Y%m%d%H%M%S)
      #     docker tag my-backend-app:${IMAGE_TAG} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-backend-app:$IMAGE_TAG

      # # Step 6: Push Docker image to ECR
      # - name: Push Docker image to ECR
      #   run: |
      #     IMAGE_TAG=$(date +%Y%m%d%H%M%S)
      #     docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-backend-app:$IMAGE_TAG
      # Step 5: Generate a timestamp for tagging the Docker image (used across steps)
      - name: Generate image tag
        id: image_tag
        run: echo "::set-output name=tag::$(date +'%Y%m%d%H%M%S')"

      # Step 6: Build and tag the Docker image using the Dockerfile
      - name: Build Docker image
        run: |
          docker build -t my-backend-app:${{ steps.image_tag.outputs.tag }} -f ./backend/Dockerfile .

      # Step 7: Tag Docker image for ECR
      - name: Tag Docker image for ECR
        run: |
          docker tag my-backend-app:${{ steps.image_tag.outputs.tag }} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-backend-app:${{ steps.image_tag.outputs.tag }}

      # Step 8: Push Docker image to ECR
      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-backend-app:${{ steps.image_tag.outputs.tag }}
