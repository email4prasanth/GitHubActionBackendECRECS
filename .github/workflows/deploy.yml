

name: Backend Check

on:
  push:
    branches:
      - prasanth
    paths:
      - 'backend/**'

  pull_request:
    branches:
      - prasanth

jobs:
  # Job 1: Build and Test the backend code
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js (assuming your backend is Node.js-based)
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm install moment nodemon express

      # Step 4: Run tests (Modify this according to your testing framework)
      - name: Run tests
        run: | 
          # Start the server and set it to shut down after 30 seconds
          node -e "
          const express = require('express');
          const moment = require('moment');

          const app = express();
          const port = 3000;

          app.get('/', (req, res) => {
              const date = moment().format('LL');
              res.send('Hello Node.js<br>' + date);
          });

          const server = app.listen(port, '0.0.0.0', () => {
              console.log('The Server is running on port ' + port);
          });

          // Shut down the server after 30 seconds
          setTimeout(() => {
              console.log('Shutting down the server after 30 seconds...');
              server.close(() => {
                  console.log('Server shut down gracefully.');
                  process.exit(0); // Exit the process
              });
          }, 2000); // 2 seconds
          "

  # Job 2: Build Docker Image and Push to ECR
  build-and-push:
    needs: build-and-test  # Only runs if tests pass
    # outputs:
    #   tag: ${{steps.build-and-push.outputs.tag }}
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Configure AWS Credentials (authentication step)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 4: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      # Step 5: Check if the ECR repository exists, and create it if it doesn't
      - name: Create ECR repository if it doesn't exist
        run: |
          if ! aws ecr describe-repositories --repository-names my-backend-app --region ${{ secrets.AWS_REGION }} > /dev/null 2>&1; then
            echo "ECR repository does not exist. Creating it..."
            aws ecr create-repository --repository-name my-backend-app --region ${{ secrets.AWS_REGION }}
          else
            echo "ECR repository already exists. Skipping creation."
          fi

      # Step 6: Generate a timestamp for tagging the Docker image
      - name: Generate image tag
        id: image_tag
        run: |
          echo "tag=$(date +'%Y%m%d%H%M%S')" > image-tag.txt
      # Upload image-tag.txt as an artifact
      - name: Upload tag artifact
        uses: actions/upload-artifact@v3
        with:
          name: image-tag
          path: image-tag.txt

      
      # # Step 7: Set the tag as an output using environment files
      # - name: Set output for tag
      #   run: |
      #     tag=$(date +'%Y%m%d%H%M%S')
      #     echo "tag=$tag" >> $GITHUB_ENV
      #     echo "tag=$tag" >> $GITHUB_OUTPUT

      # Step 7: Build and tag the Docker image using the Dockerfile
      - name: Build Docker image
        run: |
          echo "Building Docker image with tag: ${{ env.tag }}"
          docker build -t my-backend-app:${{ env.tag }} -f ./backend/Dockerfile .

      # Step 8: Tag Docker image for ECR
      - name: Tag Docker image for ECR
        run: |
          docker tag my-backend-app:${{ env.tag }} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-backend-app:${{ env.tag  }}

      # Step 9: Push Docker image to ECR
      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-backend-app:${{ env.tag  }}
    outputs:
      tag-number: ${{ steps.image_tag.outputs.tag }}

  # Job 3: Deploy the Docker Container in AWS ECS
  deploy-to-ecs:
    needs: build-and-push
    runs-on: ubuntu-latest
    # env: 
    #   tag: ${{ needs.build-and-push.outputs.tag-number}}
    # steps:
    #   # env variable
    #   - name: Native Job
    #     id: deploy-to-ecs
    #     run: |
    #       echo "$tag"
    #       echo "I'm running on ${{needs.build-and-push.outputs.tag-number}}"
    #       cat ${{needs.build-and-push.outputs.tag-number}}
    steps:
      # Download the image-tag.txt file from the artifact
      - name: Download tag artifact
        uses: actions/download-artifact@v3
        with:
          name: image-tag

      # Read the tag from the downloaded text file
      - name: Read tag from file
        run: |
          tag=$(cat image-tag.txt)
          echo "The tag is: $tag"
          

      # # Step 1: Checkout the repository
      # - name: Checkout code
      #   uses: actions/checkout@v3

      # # Step 2: Configure AWS credentials
      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v2
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: ${{ secrets.AWS_REGION }}
      # # Step : Display the image tag
      # - name: Display the image tag
      #   run: |
      #     echo "Current image tag is: ${{ needs.build-and-push.outputs.tag }}"
      #     echo "Current image tag is: ${{ env.tag }}"

      # # Step 3: Update ECS service with new image
      # - name: Deploy to ECS
      #   run: |
      #     ECS_CLUSTER=ecs-cluster
      #     ECS_SERVICE=ecs-service
      #     echo "GITHUB_ENV=$GITHUB_ENV"
      #     IMAGE_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-backend-app:${{ env.tag }}
      #     echo "Update image is $IMAGE_URI"
      # # Step 4: Get the existing task definition
      # - name: Get the existing task definition
      #   run: |
      #     TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition ecr-task-def:2 --query "taskDefinition" --output json)
      # # Step 5: Update the image in the task definition and ensure proper memory allocation
      # - name: Update the image in the task definition and memory allocation
      #   run: |
      #     NEW_TASK_DEF=$(echo "$TASK_DEFINITION" | jq --arg IMAGE_URI "$IMAGE_URI" '
      #     .containerDefinitions[0].image=$IMAGE_URI | 
      #     { 
      #       family: .family, 
      #       executionRoleArn: "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ECSTaskExecutionRole",  # Update with your ARN
      #       containerDefinitions: [{
      #         name: .containerDefinitions[0].name,
      #         image: $IMAGE_URI,
      #         cpu: .containerDefinitions[0].cpu,
      #         memory: 3072,  # Keep the container memory as required
      #         memoryReservation: 1024,  # Optional: Set a memory reservation
      #         essential: true,
      #         portMappings: [{            # Include port mappings
      #           containerPort: 3000,
      #           hostPort: 3000,
      #           protocol: "tcp"
      #         }]
      #       }],
      #       requiresCompatibilities: ["FARGATE"], 
      #       networkMode: "awsvpc", 
      #       cpu: "1024", 
      #       memory: "4096"  # Set task memory to at least 4096
      #     }')

      #     # Register the new task definition
      #     NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEF" --query "taskDefinition.taskDefinitionArn" --output text)

      #     # Update ECS service with the new task definition
      #     aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition "$NEW_TASK_DEF_ARN" --force-new-deployment
